/**
 * Copyright 2017 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.internal.os.OperatingSystem

plugins {
  id 'com.ullink.msbuild' version '2.15'
  id 'com.ullink.nuget' version '2.14'
  id 'com.ullink.nunit' version '1.9'
}

version = '0.6.0'

assemblyInfoPatcher {
  version = "${project.version}.0"
}

clean {
  delete 'Nakama/Api.pb.cs'
  delete fileTree(dir: projectDir, include: 'nunit-agent*.log')
}

task protocExec(type: Exec) {
  executable 'protoc'
  args '-I', '.',
       '-I', "$projectDir/server/server",
       "--csharp_out=$projectDir/Nakama/",
       "--csharp_opt=file_extension=.pb.cs",
       "$projectDir/server/server/api.proto"
}

msbuild {
  solutionFile = 'Nakama.sln'
  projectName  = 'Nakama'

  destinationDir  = "$buildDir/msbuild/bin"
  intermediateDir = "$buildDir/msbuild/obj"
  generateDoc = true

  // NOTE workaround for issue #55 - see gradle-msbuild-plugin
  doFirst {
    copy {
      from 'packages/NUnit.3.5.0/lib/net20'
      from 'packages/WebSocketSharp.1.0.3-rc11'
      from 'packages/protobuf3-for-unity-v3.0.0_ga_noJIT'
      into destinationDir
    }
  }
}
msbuild.dependsOn nugetRestore, protocExec

nuget {
  version = '3.4.3'
}

nunit {
  nunitVersion = '3.2.1'
  testAssemblies = [msbuild.projects['Nakama.Tests'].properties.TargetPath]
}
nunit.dependsOn msbuild

task genDocs(type: Exec) {
  executable 'doxygen'
  args 'Doxyfile'
}

task unityPackage(type: Exec) {
  def editor = '/Applications/Unity/Unity.app/Contents/MacOS/Unity'
  def ostype = OperatingSystem.current()
  if (ostype.isWindows()) {
    editor = /C:\Program Files\Unity\Editor\Unity.exe/
  } else if (ostype.isLinux()) {
    editor = '/opt/Unity/Editor/Unity'
  }

  // See if Unity is on the system PATH
//  def executable = (ostype.isWindows()) ? 'Unity.exe' : 'Unity'
//  def editorProc = Runtime.getRuntime().exec("$executable -nographics").waitFor()
//  if (editorProc.exitValue == 0) {
//    editor = executable
//  }

  def unityprojectDir = "$buildDir/release/${project.version}"

  doFirst {
    copy {
      from "$projectDir/Nakama"
      into "$unityprojectDir/Assets/Nakama/Plugins/Nakama"
      include '**/*.cs'
      include '**/*.jslib'
    }

    copy {
      from "$buildDir/msbuild/bin"
      into "$unityprojectDir/Assets/Nakama/Plugins"
      include 'Google.Protobuf.dll'
      include 'websocket-sharp.dll'
    }

    copy {
      from "$projectDir/docs"
      into "$unityprojectDir/Assets/Nakama/Documentation"
      include 'guide.pdf'
    }

    copy {
      from "$projectDir/example"
      into "$unityprojectDir/Assets/Nakama/Example"
    }
  }

  executable editor
  args '-batchmode',
       '-nographics',
       '-logFile',
       '-projectPath', "$unityprojectDir",
       '-exportPackage', 'Assets/Nakama', 'Nakama.unitypackage',
       '-quit'
}
unityPackage.dependsOn msbuild
